package net.foulest.vulture.listeners;

import lombok.AllArgsConstructor;
import net.foulest.vulture.util.KickUtil;
import net.foulest.vulture.util.Settings;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.event.block.BlockPlaceEvent;
import org.jetbrains.annotations.NotNull;

@AllArgsConstructor
public class ExploitListener implements Listener {

    /**
     * Handles block break events.
     *
     * @param event BlockBreakEvent
     */
    @EventHandler(priority = EventPriority.HIGHEST)
    public void onBlockBreak(@NotNull BlockBreakEvent event) {
        Player player = event.getPlayer();
        Block targetBlock = event.getBlock();

        // Returns if the block is null.
        if (targetBlock == null) {
            return;
        }

        Material targetBlockType = targetBlock.getType();

        // Prevents players from breaking liquids & air.
        if (targetBlockType == Material.AIR
                || targetBlockType == Material.WATER
                || targetBlockType == Material.STATIONARY_WATER
                || targetBlockType == Material.LAVA
                || targetBlockType == Material.STATIONARY_LAVA) {
            KickUtil.kickPlayer(player, event, Settings.worldInvalidBlockBreak,
                    "Tried to break invalid block"
                            + " (block=" + targetBlockType + ")"
            );
        }
    }

    /**
     * Handles block place events.
     *
     * @param event BlockPlaceEvent
     */
    @EventHandler(priority = EventPriority.HIGHEST)
    public void onBlockPlace(@NotNull BlockPlaceEvent event) {
        Player player = event.getPlayer();
        Block blockPlaced = event.getBlockPlaced();
        Block blockAgainst = event.getBlockAgainst();

        // Returns if the block is null.
        if (blockPlaced == null || blockAgainst == null) {
            return;
        }

        Material blockPlacedType = blockPlaced.getType();
        Material blockAgainstType = blockAgainst.getType();

        // Prevents players from placing blocks on liquids & air.
        if ((blockAgainstType == Material.AIR
                || blockAgainstType == Material.WATER
                || blockAgainstType == Material.STATIONARY_WATER
                || blockAgainstType == Material.LAVA
                || blockAgainstType == Material.STATIONARY_LAVA)
                && blockPlacedType != Material.WATER_LILY) {
            KickUtil.kickPlayer(player, event, Settings.worldInvalidBlockPlace,
                    "Tried to place block against invalid block"
                            + " (placed=" + blockPlacedType
                            + " against=" + blockAgainstType + ")"
            );
        }
    }
}
