package net.foulest.vulture.listeners;

import lombok.AllArgsConstructor;
import net.foulest.vulture.util.KickUtil;
import net.foulest.vulture.util.MessageUtil;
import net.foulest.vulture.util.Settings;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.block.BlockFace;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.event.block.BlockPistonExtendEvent;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.entity.EntityPortalEvent;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.event.player.PlayerTeleportEvent;
import org.bukkit.inventory.InventoryHolder;
import org.jetbrains.annotations.NotNull;

import java.util.Collection;
import java.util.List;

@AllArgsConstructor
public class ExploitListener implements Listener {

    /**
     * Handles block break events.
     *
     * @param event BlockBreakEvent
     */
    @EventHandler(priority = EventPriority.HIGHEST)
    public void onBlockBreak(@NotNull BlockBreakEvent event) {
        if (!Settings.worldInvalidBlockBreak) {
            return;
        }

        Player player = event.getPlayer();
        Block targetBlock = event.getBlock();

        // Returns if the block is null.
        if (targetBlock == null) {
            return;
        }

        Material targetBlockType = targetBlock.getType();

        // Prevents players from breaking liquids & air.
        if (targetBlockType == Material.AIR
                || targetBlockType == Material.WATER
                || targetBlockType == Material.STATIONARY_WATER
                || targetBlockType == Material.LAVA
                || targetBlockType == Material.STATIONARY_LAVA) {
            KickUtil.kickPlayer(player, event,
                    "Tried to break invalid block"
                            + " (block=" + targetBlockType + ")"
            );
        }
    }

    /**
     * Handles block place events.
     *
     * @param event BlockPlaceEvent
     */
    @EventHandler(priority = EventPriority.HIGHEST)
    public void onBlockPlace(@NotNull BlockPlaceEvent event) {
        if (!Settings.worldInvalidBlockPlace) {
            return;
        }

        Player player = event.getPlayer();
        Block blockPlaced = event.getBlockPlaced();
        Block blockAgainst = event.getBlockAgainst();

        // Returns if the block is null.
        if (blockPlaced == null || blockAgainst == null) {
            return;
        }

        Material blockPlacedType = blockPlaced.getType();
        Material blockAgainstType = blockAgainst.getType();

        // Prevents players from placing blocks on liquids & air.
        if ((blockAgainstType == Material.AIR
                || blockAgainstType == Material.WATER
                || blockAgainstType == Material.STATIONARY_WATER
                || blockAgainstType == Material.LAVA
                || blockAgainstType == Material.STATIONARY_LAVA)
                && blockPlacedType != Material.WATER_LILY) {
            KickUtil.kickPlayer(player, event,
                    "Tried to place block against invalid block"
                            + " (placed=" + blockPlacedType
                            + " against=" + blockAgainstType + ")"
            );
        }
    }

    /**
     * Handles entities entering portals.
     *
     * @param event EntityPortalEvent
     */
    @EventHandler(priority = EventPriority.HIGHEST)
    public void onPortalEnter(@NotNull EntityPortalEvent event) {
        if (!Settings.portalsBlockAffectedMobs) {
            return;
        }

        if (event.getEntity() instanceof InventoryHolder
                && !(event.getEntity() instanceof Player)) {
            event.setCancelled(true);
        }
    }

    /**
     * Prevents pistons from moving entities.
     *
     * @param event BlockPistonExtendEvent
     */
    @EventHandler(priority = EventPriority.HIGHEST)
    public void onPistonExtend(@NotNull BlockPistonExtendEvent event) {
        if (!Settings.pistonsBlockMovingEntities) {
            return;
        }

        List<Block> blocks = event.getBlocks();

        if (!blocks.isEmpty()) {
            for (Block block : blocks) {
                Collection<Entity> entities = block.getWorld().getNearbyEntities(block.getLocation(), 0.5, 0.5, 0.5);

                // Cancels the piston event if entities are found.
                if (!entities.isEmpty()) {
                    event.setCancelled(true);
                    break;
                }
            }
        } else {
            Block pistonBlock = event.getBlock();
            BlockFace direction = event.getDirection();
            Location pushLocation = pistonBlock.getRelative(direction).getLocation().add(0.5, 0, 0.5);
            Collection<Entity> entities = pushLocation.getWorld().getNearbyEntities(pushLocation, 0.5, 0.5, 0.5);

            // Cancels the piston event if entities are found.
            if (!entities.isEmpty()) {
                event.setCancelled(true);
            }
        }
    }

    /**
     * Prevents players from moving to the Nether roof.
     *
     * @param event PlayerMoveEvent
     */
    @EventHandler(priority = EventPriority.HIGHEST)
    private void onPlayerMoveNetherRoof(@NotNull PlayerMoveEvent event) {
        if (!Settings.worldBlockNetherCeiling) {
            return;
        }

        Player player = event.getPlayer();

        // Prevents players from moving to the Nether roof.
        if (event.getTo().getWorld().getEnvironment() == World.Environment.NETHER
                && event.getTo().getY() >= 127.0) {
            MessageUtil.messagePlayer(player, "&cThe Nether roof has been disabled.");
            event.setCancelled(true);
        }
    }

    /**
     * Prevents players from teleporting to the Nether roof.
     *
     * @param event PlayerTeleportEvent
     */
    @EventHandler(priority = EventPriority.HIGHEST)
    private void onPlayerTeleportNetherRoof(@NotNull PlayerTeleportEvent event) {
        if (!Settings.worldBlockNetherCeiling) {
            return;
        }

        Player player = event.getPlayer();

        // Prevents players from teleporting to the Nether roof.
        if (event.getTo().getWorld().getEnvironment() == World.Environment.NETHER
                && event.getTo().getY() >= 127.0) {
            MessageUtil.messagePlayer(player, "&cThe Nether roof has been disabled.");
            event.setCancelled(true);
        }
    }

    /**
     * Centers the destination location for pearl throws.
     *
     * @param event PlayerTeleportEvent
     */
    @EventHandler(priority = EventPriority.HIGHEST)
    private void onPlayerPearlEvent(@NotNull PlayerTeleportEvent event) {
        if (!Settings.worldFixPearlPhasing) {
            return;
        }

        // Centers the destination location for pearl throws.
        if (event.getCause() == PlayerTeleportEvent.TeleportCause.ENDER_PEARL) {
            Location to = event.getTo();
            to.setX(to.getBlockX() + 0.5);
            to.setZ(to.getBlockZ() + 0.5);
            event.setTo(to);
        }
    }

    /**
     * Blocks players from executing commands while sleeping.
     *
     * @param event PlayerCommandPreprocessEvent
     */
    @EventHandler(priority = EventPriority.HIGHEST)
    private void onCommand(@NotNull PlayerCommandPreprocessEvent event) {
        if (!Settings.worldBlockCommandsWhileSleeping) {
            return;
        }

        Player player = event.getPlayer();

        if (player.isSleeping()) {
            MessageUtil.messagePlayer(player, "&cYou can't execute commands while sleeping.");
            event.setCancelled(true);
        }
    }
}
